# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import signalc_group_pb2 as proto_dot_signalc__group__pb2


class GroupSenderKeyDistributionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSenderKeyGroup = channel.unary_unary(
                '/signalc_group.GroupSenderKeyDistribution/RegisterSenderKeyGroup',
                request_serializer=proto_dot_signalc__group__pb2.GroupRegisterSenderKeyRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.GroupRegisterSenderKeyResponse.FromString,
                )
        self.GetSenderKeyInGroup = channel.unary_unary(
                '/signalc_group.GroupSenderKeyDistribution/GetSenderKeyInGroup',
                request_serializer=proto_dot_signalc__group__pb2.GroupGetSenderKeyRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.GroupGetSenderKeyResponse.FromString,
                )
        self.GetAllSenderKeyInGroup = channel.unary_unary(
                '/signalc_group.GroupSenderKeyDistribution/GetAllSenderKeyInGroup',
                request_serializer=proto_dot_signalc__group__pb2.GroupGetAllSenderKeyRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.GroupGetAllSenderKeyResponse.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/signalc_group.GroupSenderKeyDistribution/Subscribe',
                request_serializer=proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.BaseResponse.FromString,
                )
        self.Listen = channel.unary_stream(
                '/signalc_group.GroupSenderKeyDistribution/Listen',
                request_serializer=proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.GroupPublication.FromString,
                )
        self.Publish = channel.unary_unary(
                '/signalc_group.GroupSenderKeyDistribution/Publish',
                request_serializer=proto_dot_signalc__group__pb2.GroupPublishRequest.SerializeToString,
                response_deserializer=proto_dot_signalc__group__pb2.BaseResponse.FromString,
                )


class GroupSenderKeyDistributionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterSenderKeyGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSenderKeyInGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllSenderKeyInGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupSenderKeyDistributionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSenderKeyGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSenderKeyGroup,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupRegisterSenderKeyRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.GroupRegisterSenderKeyResponse.SerializeToString,
            ),
            'GetSenderKeyInGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSenderKeyInGroup,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupGetSenderKeyRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.GroupGetSenderKeyResponse.SerializeToString,
            ),
            'GetAllSenderKeyInGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllSenderKeyInGroup,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupGetAllSenderKeyRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.GroupGetAllSenderKeyResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.BaseResponse.SerializeToString,
            ),
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.GroupPublication.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=proto_dot_signalc__group__pb2.GroupPublishRequest.FromString,
                    response_serializer=proto_dot_signalc__group__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'signalc_group.GroupSenderKeyDistribution', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroupSenderKeyDistribution(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterSenderKeyGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signalc_group.GroupSenderKeyDistribution/RegisterSenderKeyGroup',
            proto_dot_signalc__group__pb2.GroupRegisterSenderKeyRequest.SerializeToString,
            proto_dot_signalc__group__pb2.GroupRegisterSenderKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSenderKeyInGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signalc_group.GroupSenderKeyDistribution/GetSenderKeyInGroup',
            proto_dot_signalc__group__pb2.GroupGetSenderKeyRequest.SerializeToString,
            proto_dot_signalc__group__pb2.GroupGetSenderKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllSenderKeyInGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signalc_group.GroupSenderKeyDistribution/GetAllSenderKeyInGroup',
            proto_dot_signalc__group__pb2.GroupGetAllSenderKeyRequest.SerializeToString,
            proto_dot_signalc__group__pb2.GroupGetAllSenderKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signalc_group.GroupSenderKeyDistribution/Subscribe',
            proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.SerializeToString,
            proto_dot_signalc__group__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/signalc_group.GroupSenderKeyDistribution/Listen',
            proto_dot_signalc__group__pb2.GroupSubscribeAndListenRequest.SerializeToString,
            proto_dot_signalc__group__pb2.GroupPublication.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signalc_group.GroupSenderKeyDistribution/Publish',
            proto_dot_signalc__group__pb2.GroupPublishRequest.SerializeToString,
            proto_dot_signalc__group__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
